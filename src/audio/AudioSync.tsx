import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Voiceover, { createVoiceoverScript } from './Voiceover';\nimport BackgroundMusic, { createMusicLibrary } from './BackgroundMusic';\nimport SoundEffects, { playTransitionSound, playClickSound } from './SoundEffects';\n\ninterface AudioSyncProps {\n  slides?: SlideData[];\n  currentSlide?: number;\n  onSlideChange?: (slideIndex: number) => void;\n  onAudioEvent?: (event: AudioEvent) => void;\n  autoAdvance?: boolean;\n  syncMode?: 'manual' | 'auto' | 'hybrid';\n  className?: string;\n}\n\ninterface SlideData {\n  id: string;\n  title: string;\n  content: string;\n  duration?: number; // Duration in seconds\n  voiceoverText?: string;\n  musicTrack?: string;\n  soundEffects?: string[];\n  transitions?: {\n    in?: string;\n    out?: string;\n  };\n}\n\ninterface AudioEvent {\n  type: 'voiceover-start' | 'voiceover-end' | 'music-change' | 'effect-play' | 'slide-change';\n  timestamp: number;\n  data?: any;\n}\n\ninterface AudioSyncState {\n  isPlaying: boolean;\n  currentTime: number;\n  totalDuration: number;\n  voiceoverProgress: number;\n  slideProgress: number;\n}\n\nconst AudioSync: React.FC<AudioSyncProps> = ({\n  slides = [],\n  currentSlide = 0,\n  onSlideChange,\n  onAudioEvent,\n  autoAdvance = true,\n  syncMode = 'hybrid',\n  className = ''\n}) => {\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n  const [syncState, setSyncState] = useState<AudioSyncState>({\n    isPlaying: false,\n    currentTime: 0,\n    totalDuration: 0,\n    voiceoverProgress: 0,\n    slideProgress: 0\n  });\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [currentSlideData, setCurrentSlideData] = useState<SlideData | null>(null);\n  const [audioEvents, setAudioEvents] = useState<AudioEvent[]>([]);\n  \n  const syncIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const startTimeRef = useRef<number>(0);\n  const voiceoverRef = useRef<any>(null);\n  const musicRef = useRef<any>(null);\n  const effectsRef = useRef<any>(null);\n\n  // Default slides for REST API demo\n  const defaultSlides: SlideData[] = [\n    {\n      id: 'intro',\n      title: 'Welcome to REST API Demo',\n      content: 'A modern, clean REST API built with best practices',\n      duration: 8,\n      voiceoverText: createVoiceoverScript.intro(),\n      musicTrack: 'tech-showcase',\n      soundEffects: ['slide-transition', 'tech-beep'],\n      transitions: { in: 'fade-in', out: 'slide-transition' }\n    },\n    {\n      id: 'features',\n      title: 'Key Features',\n      content: 'Authentication, CRUD operations, error handling, and more',\n      duration: 12,\n      voiceoverText: createVoiceoverScript.features([\n        'JWT Authentication',\n        'RESTful Endpoints',\n        'Error Handling',\n        'Data Validation',\n        'API Documentation'\n      ]),\n      musicTrack: 'digital-innovation',\n      soundEffects: ['code-pop', 'notification-chime'],\n      transitions: { in: 'slide-transition', out: 'data-flow' }\n    },\n    {\n      id: 'demo',\n      title: 'Live API Demo',\n      content: 'Watch our API in action with real requests and responses',\n      duration: 15,\n      voiceoverText: createVoiceoverScript.demo(),\n      musicTrack: 'api-power',\n      soundEffects: ['api-success', 'data-flow', 'tech-beep'],\n      transitions: { in: 'data-flow', out: 'page-whoosh' }\n    },\n    {\n      id: 'conclusion',\n      title: 'Ready to Build?',\n      content: 'Start building amazing applications with our REST API',\n      duration: 6,\n      voiceoverText: createVoiceoverScript.conclusion(),\n      musicTrack: 'system-pulse',\n      soundEffects: ['success-chord', 'fade-in'],\n      transitions: { in: 'page-whoosh', out: 'fade-in' }\n    }\n  ];\n\n  const allSlides = slides.length > 0 ? slides : defaultSlides;\n\n  // Initialize audio context\n  useEffect(() => {\n    const initAudio = async () => {\n      try {\n        const context = new (window.AudioContext || (window as any).webkitAudioContext)();\n        setAudioContext(context);\n        setIsInitialized(true);\n        \n        // Calculate total duration\n        const totalDuration = allSlides.reduce((sum, slide) => sum + (slide.duration || 10), 0);\n        setSyncState(prev => ({ ...prev, totalDuration }));\n        \n      } catch (error) {\n        console.error('Failed to initialize audio context:', error);\n      }\n    };\n\n    initAudio();\n\n    return () => {\n      if (syncIntervalRef.current) {\n        clearInterval(syncIntervalRef.current);\n      }\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close();\n      }\n    };\n  }, []);\n\n  // Update current slide data\n  useEffect(() => {\n    if (allSlides[currentSlide]) {\n      setCurrentSlideData(allSlides[currentSlide]);\n    }\n  }, [currentSlide, allSlides]);\n\n  // Emit audio events\n  const emitAudioEvent = useCallback((type: AudioEvent['type'], data?: any) => {\n    const event: AudioEvent = {\n      type,\n      timestamp: Date.now(),\n      data\n    };\n    \n    setAudioEvents(prev => [...prev.slice(-9), event]); // Keep last 10 events\n    onAudioEvent?.(event);\n  }, [onAudioEvent]);\n\n  // Start synchronized playback\n  const startSync = useCallback(async () => {\n    if (!audioContext || !isInitialized) return;\n\n    // Resume audio context if suspended\n    if (audioContext.state === 'suspended') {\n      await audioContext.resume();\n    }\n\n    startTimeRef.current = Date.now();\n    setSyncState(prev => ({ ...prev, isPlaying: true, currentTime: 0 }));\n    \n    // Start sync interval\n    syncIntervalRef.current = setInterval(() => {\n      const elapsed = (Date.now() - startTimeRef.current) / 1000;\n      const slideProgress = currentSlideData ? (elapsed % (currentSlideData.duration || 10)) / (currentSlideData.duration || 10) * 100 : 0;\n      \n      setSyncState(prev => ({\n        ...prev,\n        currentTime: elapsed,\n        slideProgress\n      }));\n\n      // Auto-advance slides\n      if (autoAdvance && currentSlideData && elapsed >= (currentSlideData.duration || 10)) {\n        advanceSlide();\n      }\n    }, 100);\n\n    // Play transition sound\n    if (currentSlideData?.transitions?.in) {\n      playTransitionSound(audioContext, 0.3);\n    }\n\n    emitAudioEvent('slide-change', { slideIndex: currentSlide });\n  }, [audioContext, isInitialized, currentSlideData, autoAdvance, currentSlide]);\n\n  // Stop synchronized playback\n  const stopSync = useCallback(() => {\n    if (syncIntervalRef.current) {\n      clearInterval(syncIntervalRef.current);\n      syncIntervalRef.current = null;\n    }\n    \n    setSyncState(prev => ({ \n      ...prev, \n      isPlaying: false, \n      currentTime: 0, \n      voiceoverProgress: 0, \n      slideProgress: 0 \n    }));\n    \n    startTimeRef.current = 0;\n  }, []);\n\n  // Advance to next slide\n  const advanceSlide = useCallback(() => {\n    const nextSlide = (currentSlide + 1) % allSlides.length;\n    \n    // Play transition sound\n    if (audioContext && currentSlideData?.transitions?.out) {\n      playTransitionSound(audioContext, 0.3);\n    }\n    \n    onSlideChange?.(nextSlide);\n    emitAudioEvent('slide-change', { slideIndex: nextSlide });\n    \n    // Reset timing for new slide\n    startTimeRef.current = Date.now();\n  }, [currentSlide, allSlides.length, audioContext, currentSlideData, onSlideChange]);\n\n  // Go to previous slide\n  const previousSlide = useCallback(() => {\n    const prevSlide = currentSlide === 0 ? allSlides.length - 1 : currentSlide - 1;\n    \n    if (audioContext) {\n      playTransitionSound(audioContext, 0.3);\n    }\n    \n    onSlideChange?.(prevSlide);\n    emitAudioEvent('slide-change', { slideIndex: prevSlide });\n    \n    startTimeRef.current = Date.now();\n  }, [currentSlide, allSlides.length, audioContext, onSlideChange]);\n\n  // Handle voiceover events\n  const handleVoiceoverStart = useCallback(() => {\n    emitAudioEvent('voiceover-start');\n  }, [emitAudioEvent]);\n\n  const handleVoiceoverEnd = useCallback(() => {\n    emitAudioEvent('voiceover-end');\n    \n    if (autoAdvance && syncMode === 'auto') {\n      setTimeout(() => {\n        advanceSlide();\n      }, 1000); // 1 second delay before advancing\n    }\n  }, [emitAudioEvent, autoAdvance, syncMode, advanceSlide]);\n\n  const handleVoiceoverProgress = useCallback((progress: number) => {\n    setSyncState(prev => ({ ...prev, voiceoverProgress: progress }));\n  }, []);\n\n  // Handle music track changes\n  const handleMusicChange = useCallback((track: any) => {\n    emitAudioEvent('music-change', { track: track.name });\n  }, [emitAudioEvent]);\n\n  // Handle sound effect plays\n  const handleEffectPlayed = useCallback((effectName: string) => {\n    emitAudioEvent('effect-play', { effectName });\n  }, [emitAudioEvent]);\n\n  // Play slide sound effects\n  const playSlideEffects = useCallback(() => {\n    if (!currentSlideData?.soundEffects || !audioContext) return;\n    \n    currentSlideData.soundEffects.forEach((effectName, index) => {\n      setTimeout(() => {\n        if (effectName === 'click') {\n          playClickSound(audioContext, 0.4);\n        } else if (effectName === 'transition') {\n          playTransitionSound(audioContext, 0.4);\n        }\n        emitAudioEvent('effect-play', { effectName });\n      }, index * 500); // Stagger effects\n    });\n  }, [currentSlideData, audioContext, emitAudioEvent]);\n\n  // Format time display\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <div className={`audio-sync ${className}`}>\n      <div className=\"sync-controls\">\n        <div className=\"playback-section\">\n          <h3>🎬 Audio Synchronization</h3>\n          \n          <div className=\"main-controls\">\n            {!syncState.isPlaying ? (\n              <button \n                onClick={startSync}\n                disabled={!isInitialized}\n                className=\"sync-btn primary\"\n                title=\"Start synchronized playback\"\n              >\n                ▶️ Start Sync\n              </button>\n            ) : (\n              <button \n                onClick={stopSync}\n                className=\"sync-btn stop\"\n                title=\"Stop synchronized playback\"\n              >\n                ⏹️ Stop Sync\n              </button>\n            )}\n            \n            <button \n              onClick={previousSlide}\n              disabled={!isInitialized}\n              className=\"sync-btn\"\n              title=\"Previous slide\"\n            >\n              ⏮️ Previous\n            </button>\n            \n            <button \n              onClick={advanceSlide}\n              disabled={!isInitialized}\n              className=\"sync-btn\"\n              title=\"Next slide\"\n            >\n              ⏭️ Next\n            </button>\n            \n            <button \n              onClick={playSlideEffects}\n              disabled={!isInitialized || !currentSlideData?.soundEffects}\n              className=\"sync-btn effects\"\n              title=\"Play slide effects\"\n            >\n              🎵 Effects\n            </button>\n          </div>\n          \n          <div className=\"progress-section\">\n            <div className=\"time-display\">\n              <span>Total: {formatTime(syncState.currentTime)} / {formatTime(syncState.totalDuration)}</span>\n              <span>Slide: {currentSlide + 1} / {allSlides.length}</span>\n            </div>\n            \n            <div className=\"progress-bars\">\n              <div className=\"progress-bar total\">\n                <div className=\"progress-label\">Overall Progress:</div>\n                <div className=\"progress-track\">\n                  <div \n                    className=\"progress-fill\" \n                    style={{ \n                      width: `${(syncState.currentTime / syncState.totalDuration) * 100}%` \n                    }}\n                  />\n                </div>\n                <span className=\"progress-text\">\n                  {Math.round((syncState.currentTime / syncState.totalDuration) * 100)}%\n                </span>\n              </div>\n              \n              <div className=\"progress-bar slide\">\n                <div className=\"progress-label\">Slide Progress:</div>\n                <div className=\"progress-track\">\n                  <div \n                    className=\"progress-fill slide-fill\" \n                    style={{ width: `${syncState.slideProgress}%` }}\n                  />\n                </div>\n                <span className=\"progress-text\">\n                  {Math.round(syncState.slideProgress)}%\n                </span>\n              </div>\n              \n              <div className=\"progress-bar voiceover\">\n                <div className=\"progress-label\">Voiceover:</div>\n                <div className=\"progress-track\">\n                  <div \n                    className=\"progress-fill voiceover-fill\" \n                    style={{ width: `${syncState.voiceoverProgress}%` }}\n                  />\n                </div>\n                <span className=\"progress-text\">\n                  {Math.round(syncState.voiceoverProgress)}%\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"sync-settings\">\n          <div className=\"setting-group\">\n            <label>\n              Sync Mode:\n              <select \n                value={syncMode} \n                onChange={(e) => {\n                  // Note: This would need to be controlled by parent component\n                  console.log('Sync mode change requested:', e.target.value);\n                }}\n                disabled={syncState.isPlaying}\n              >\n                <option value=\"manual\">Manual Control</option>\n                <option value=\"auto\">Auto Advance</option>\n                <option value=\"hybrid\">Hybrid (Voice + Manual)</option>\n              </select>\n            </label>\n          </div>\n          \n          <div className=\"setting-group\">\n            <label>\n              <input \n                type=\"checkbox\" \n                checked={autoAdvance}\n                onChange={(e) => {\n                  // Note: This would need to be controlled by parent component\n                  console.log('Auto advance change requested:', e.target.checked);\n                }}\n                disabled={syncState.isPlaying}\n              />\n              Auto Advance Slides\n            </label>\n          </div>\n        </div>\n      </div>\n\n      {currentSlideData && (\n        <div className=\"current-slide-info\">\n          <h4>Current Slide: {currentSlideData.title}</h4>\n          <div className=\"slide-details\">\n            <p>{currentSlideData.content}</p>\n            <div className=\"slide-meta\">\n              <span>Duration: {currentSlideData.duration}s</span>\n              <span>Music: {currentSlideData.musicTrack}</span>\n              <span>Effects: {currentSlideData.soundEffects?.length || 0}</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"audio-components\">\n        {currentSlideData?.voiceoverText && (\n          <Voiceover\n            ref={voiceoverRef}\n            text={currentSlideData.voiceoverText}\n            autoPlay={syncState.isPlaying}\n            onStart={handleVoiceoverStart}\n            onEnd={handleVoiceoverEnd}\n            onProgress={handleVoiceoverProgress}\n            rate={1.1}\n            pitch={1.05}\n            volume={0.8}\n          />\n        )}\n\n        <BackgroundMusic\n          ref={musicRef}\n          tracks={createMusicLibrary.techDemo()}\n          autoPlay={syncState.isPlaying}\n          volume={0.25}\n          onTrackChange={handleMusicChange}\n        />\n\n        <SoundEffects\n          ref={effectsRef}\n          onEffectPlayed={handleEffectPlayed}\n          volume={0.4}\n        />\n      </div>\n\n      <div className=\"event-log\">\n        <h4>Audio Events Log:</h4>\n        <div className=\"events-list\">\n          {audioEvents.slice(-5).map((event, index) => (\n            <div key={index} className={`event-item ${event.type}`}>\n              <span className=\"event-time\">\n                {new Date(event.timestamp).toLocaleTimeString()}\n              </span>\n              <span className=\"event-type\">{event.type}</span>\n              {event.data && (\n                <span className=\"event-data\">\n                  {JSON.stringify(event.data)}\n                </span>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <style jsx>{`\n        .audio-sync {\n          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n          border-radius: 12px;\n          padding: 24px;\n          margin: 16px 0;\n          color: white;\n          box-shadow: 0 8px 32px rgba(0,0,0,0.1);\n        }\n\n        .sync-controls {\n          display: grid;\n          grid-template-columns: 2fr 1fr;\n          gap: 24px;\n          margin-bottom: 24px;\n        }\n\n        .playback-section h3 {\n          margin: 0 0 16px 0;\n          color: #4facfe;\n        }\n\n        .main-controls {\n          display: flex;\n          gap: 12px;\n          margin-bottom: 20px;\n          flex-wrap: wrap;\n        }\n\n        .sync-btn {\n          background: rgba(255,255,255,0.2);\n          border: none;\n          border-radius: 8px;\n          padding: 12px 20px;\n          color: white;\n          font-weight: 600;\n          cursor: pointer;\n          transition: all 0.3s ease;\n          backdrop-filter: blur(10px);\n        }\n\n        .sync-btn:hover:not(:disabled) {\n          background: rgba(255,255,255,0.3);\n          transform: translateY(-2px);\n        }\n\n        .sync-btn:disabled {\n          opacity: 0.5;\n          cursor: not-allowed;\n          transform: none;\n        }\n\n        .sync-btn.primary {\n          background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n        }\n\n        .sync-btn.stop {\n          background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);\n        }\n\n        .sync-btn.effects {\n          background: linear-gradient(135deg, #a8e6cf 0%, #7fcdcd 100%);\n        }\n\n        .time-display {\n          display: flex;\n          justify-content: space-between;\n          margin-bottom: 16px;\n          font-family: 'Courier New', monospace;\n          font-size: 14px;\n        }\n\n        .progress-bars {\n          display: flex;\n          flex-direction: column;\n          gap: 12px;\n        }\n\n        .progress-bar {\n          display: grid;\n          grid-template-columns: 120px 1fr 60px;\n          align-items: center;\n          gap: 12px;\n        }\n\n        .progress-label {\n          font-size: 12px;\n          font-weight: 600;\n        }\n\n        .progress-track {\n          height: 8px;\n          background: rgba(255,255,255,0.2);\n          border-radius: 4px;\n          overflow: hidden;\n        }\n\n        .progress-fill {\n          height: 100%;\n          background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);\n          transition: width 0.3s ease;\n          border-radius: 4px;\n        }\n\n        .progress-fill.slide-fill {\n          background: linear-gradient(90deg, #a8e6cf 0%, #7fcdcd 100%);\n        }\n\n        .progress-fill.voiceover-fill {\n          background: linear-gradient(90deg, #ffa726 0%, #ff7043 100%);\n        }\n\n        .progress-text {\n          font-size: 12px;\n          text-align: right;\n          font-family: 'Courier New', monospace;\n        }\n\n        .sync-settings {\n          background: rgba(0,0,0,0.2);\n          padding: 16px;\n          border-radius: 8px;\n        }\n\n        .setting-group {\n          margin-bottom: 16px;\n        }\n\n        .setting-group label {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          font-size: 14px;\n        }\n\n        .setting-group select {\n          background: rgba(255,255,255,0.1);\n          border: 1px solid rgba(255,255,255,0.2);\n          border-radius: 6px;\n          padding: 8px 12px;\n          color: white;\n        }\n\n        .setting-group select option {\n          background: #333;\n          color: white;\n        }\n\n        .setting-group input[type=\"checkbox\"] {\n          margin-right: 8px;\n        }\n\n        .current-slide-info {\n          background: rgba(0,0,0,0.2);\n          padding: 16px;\n          border-radius: 8px;\n          margin-bottom: 24px;\n        }\n\n        .current-slide-info h4 {\n          margin: 0 0 12px 0;\n          color: #4facfe;\n        }\n\n        .slide-details p {\n          margin: 0 0 12px 0;\n          line-height: 1.5;\n        }\n\n        .slide-meta {\n          display: flex;\n          gap: 16px;\n          font-size: 12px;\n          opacity: 0.8;\n        }\n\n        .slide-meta span {\n          background: rgba(255,255,255,0.1);\n          padding: 4px 8px;\n          border-radius: 4px;\n        }\n\n        .audio-components {\n          display: flex;\n          flex-direction: column;\n          gap: 16px;\n          margin-bottom: 24px;\n        }\n\n        .event-log {\n          background: rgba(0,0,0,0.2);\n          padding: 16px;\n          border-radius: 8px;\n        }\n\n        .event-log h4 {\n          margin: 0 0 12px 0;\n          color: #4facfe;\n          font-size: 14px;\n        }\n\n        .events-list {\n          display: flex;\n          flex-direction: column;\n          gap: 4px;\n          max-height: 120px;\n          overflow-y: auto;\n        }\n\n        .event-item {\n          display: grid;\n          grid-template-columns: 80px 120px 1fr;\n          gap: 8px;\n          font-size: 12px;\n          padding: 4px 8px;\n          border-radius: 4px;\n          background: rgba(255,255,255,0.05);\n        }\n\n        .event-time {\n          font-family: 'Courier New', monospace;\n          opacity: 0.7;\n        }\n\n        .event-type {\n          font-weight: 600;\n          text-transform: capitalize;\n        }\n\n        .event-data {\n          font-family: 'Courier New', monospace;\n          opacity: 0.8;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n\n        .event-item.voiceover-start,\n        .event-item.voiceover-end {\n          border-left: 3px solid #ffa726;\n        }\n\n        .event-item.music-change {\n          border-left: 3px solid #4facfe;\n        }\n\n        .event-item.effect-play {\n          border-left: 3px solid #a8e6cf;\n        }\n\n        .event-item.slide-change {\n          border-left: 3px solid #ff6b6b;\n        }\n\n        @media (max-width: 768px) {\n          .sync-controls {\n            grid-template-columns: 1fr;\n          }\n          \n          .main-controls {\n            justify-content: center;\n          }\n          \n          .progress-bar {\n            grid-template-columns: 1fr;\n            text-align: center;\n            gap: 8px;\n          }\n          \n          .slide-meta {\n            flex-direction: column;\n            gap: 8px;\n          }\n          \n          .event-item {\n            grid-template-columns: 1fr;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default AudioSync;\n\n// Export utility functions\nexport const createSyncTimeline = (slides: SlideData[]) => {\n  let currentTime = 0;\n  return slides.map(slide => {\n    const timing = {\n      slideId: slide.id,\n      startTime: currentTime,\n      endTime: currentTime + (slide.duration || 10),\n      voiceoverText: slide.voiceoverText,\n      musicTrack: slide.musicTrack,\n      effects: slide.soundEffects || []\n    };\n    currentTime += slide.duration || 10;\n    return timing;\n  });\n};\n\nexport const validateAudioSync = (slides: SlideData[]) => {\n  const issues = [];\n  \n  slides.forEach((slide, index) => {\n    if (!slide.voiceoverText) {\n      issues.push(`Slide ${index + 1}: Missing voiceover text`);\n    }\n    if (!slide.duration || slide.duration < 3) {\n      issues.push(`Slide ${index + 1}: Duration too short (min 3s)`);\n    }\n    if (!slide.musicTrack) {\n      issues.push(`Slide ${index + 1}: Missing background music`);\n    }\n  });\n  \n  return {\n    isValid: issues.length === 0,\n    issues,\n    totalDuration: slides.reduce((sum, slide) => sum + (slide.duration || 10), 0)\n  };\n};"